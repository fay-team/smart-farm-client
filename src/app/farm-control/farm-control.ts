import { Component } from '@angular/core';
import { MqttService } from '../service/mqtt';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-farm-control',
  imports: [FormsModule, CommonModule],
  templateUrl: './farm-control.html',
  styleUrl: './farm-control.scss',
  standalone: true,
  providers: [MqttService]
})
export class FarmControl {
  command = '';
  timeInput = '';
  selectedAction: 'on' | 'off' = 'on';
  selectedDate = '';
  selectedTime = '';
  inputMode: 'duration' | 'datetime' = 'duration';
  showNotification = false;
  notificationMessage = '';
  notificationType: 'success' | 'error' = 'success';

  constructor(private mqttService: MqttService) {}

  private isValidTimeFormat(time: string): boolean {
    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö:
    // 1. ‡πÄ‡∏ß‡∏•‡∏≤ (HH:MM)
    // 2. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô + s/m/h
    // 3. ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÜ (‡∏à‡∏∞‡∏ñ‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ)
    const timePattern = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
    const durationPattern = /^\d+[smh]$/i;
    const numberOnlyPattern = /^\d+$/;

    return timePattern.test(time.trim()) ||
           durationPattern.test(time.trim()) ||
           numberOnlyPattern.test(time.trim());
  }

  private isValidDateTime(): boolean {
    return this.selectedDate !== '' && this.selectedTime !== '';
  }

  private formatDateTime(): string {
    if (!this.selectedDate || !this.selectedTime) return '';
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å YYYY-MM-DD ‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY
    const dateParts = this.selectedDate.split('-');
    const formattedDate = `${dateParts[2]}/${dateParts[1]}/${dateParts[0]}`;
    
    return `${formattedDate} ${this.selectedTime}`;
  }

  getPreviewCommand(): string {
    if (this.inputMode === 'duration' && this.timeInput && this.selectedAction) {
      let processedTime = this.timeInput.trim();
      if (/^\d+$/.test(processedTime)) {
        processedTime = processedTime + 'm';
      }
      return `${processedTime} ${this.selectedAction}`;
    } else if (this.inputMode === 'datetime' && this.selectedDate && this.selectedTime && this.selectedAction) {
      const formattedDateTime = this.formatDateTime();
      return `${formattedDateTime} ${this.selectedAction}`;
    }
    return '';
  }  private showPopup(message: string, type: 'success' | 'error') {
    this.notificationMessage = message;
    this.notificationType = type;
    this.showNotification = true;

    // ‡∏ã‡πà‡∏≠‡∏ô popup ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setTimeout(() => {
      this.showNotification = false;
    }, 3000);
  }

  send() {
    if (this.inputMode === 'duration') {
      this.sendDurationCommand();
    } else {
      this.sendDateTimeCommand();
    }
  }

  private sendDurationCommand() {
    const trimmedTime = this.timeInput.trim();

    if (!trimmedTime) {
      this.showPopup('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤', 'error');
      return;
    }

    if (!this.isValidTimeFormat(trimmedTime)) {
      this.showPopup('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡πÉ‡∏ä‡πâ: HH:MM ‡∏´‡∏£‡∏∑‡∏≠ 5s/5m/5h ‡∏´‡∏£‡∏∑‡∏≠ 5 (‡∏ô‡∏≤‡∏ó‡∏µ)', 'error');
      return;
    }

    try {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÜ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° 'm' (‡∏ô‡∏≤‡∏ó‡∏µ) ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      let processedTime = trimmedTime;
      if (/^\d+$/.test(trimmedTime)) {
        processedTime = trimmedTime + 'm';
      }

      const fullCommand = `${processedTime} ${this.selectedAction}`;
      this.mqttService.publish('myhome/led', fullCommand);
      this.showPopup('‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üì°', 'success');
      this.timeInput = '';
    } catch (error) {
      this.showPopup('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á', 'error');
    }
  }

  private sendDateTimeCommand() {
    if (!this.isValidDateTime()) {
      this.showPopup('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤', 'error');
      return;
    }

    try {
      const formattedDateTime = this.formatDateTime();
      const fullCommand = `${formattedDateTime} ${this.selectedAction}`;
      this.mqttService.publish('myhome/led', fullCommand);
      this.showPopup('‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üì°', 'success');
      this.selectedDate = '';
      this.selectedTime = '';
    } catch (error) {
      this.showPopup('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á', 'error');
    }
  }
}
